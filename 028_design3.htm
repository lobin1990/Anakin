<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<title>Untitled Document</title>
		<script type=text/javascript charset=utf-8>
			
			//鸭式辨型法
			//1 创建接口类
			var Interface = function(name,methods){
				this.name = name;
				this.methods = methods;
			}
			//2 实例化接口对象
			var CompositeInterface = new Interface('CompositeInterface',['add','remove']);
			var FormItemInterface = new Interface('FormItemInterface',['update','select']);
			
			//3 创建检测方法
			Interface.ensureImplents = function(object){
				if(arguments.length < 2){
					throw new Error('ensureImplements应该有两个以上的参数！');
				}
				//获取全部接口实例对象
				for(var i = 1;i < arguments.length;i++){
					var instanceInterface = arguments[i];
					if(instanceInterface.constructor !== Interface){
						throw new Error('参数的构造器应该为Interface!');
					}
					//获取每个接口实例对象的每个方法
					for(var j = 0;j < instanceInterface.methods.length;j++){
						var methodsName = instanceInterface.methods[j];
						//object[key]就是方法（参考数组）
						if(!object[methodsName] || typeof object[methodsName] !== 'function'){
							throw new Error(methodsName + '方法不存在！');
						}
					}
				}
			}
			
			//4 创建具体实现类
			function CompositeImp(){
				
			}
			CompositeImp.prototype.add = function(){
				alert('add...');
			}
			CompositeImp.prototype.remove = function(){
				alert('remove...');
			}
			CompositeImp.prototype.update = function(){
				alert('update...');
			}
			CompositeImp.prototype.select = function(){
				alert('select..');
			}
			
			//创建具体实现对象
			var c1 = new CompositeImp();
			Interface.ensureImplents(c1,CompositeInterface,FormItemInterface);
			c1.add();
			
			
			
			
		</script>
	</head>
	<body>
	</body>
</html>
